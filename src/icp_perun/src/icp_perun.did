type Error = nat8;
type L2Account = vec nat8;
type Timestamp = nat64;
type Duration = nat64;
type Hash = vec nat8;
type Nonce = Hash;
type ChannelId = Hash;
type Amount = nat;

type Funding = record { channel: ChannelId; participant: L2Account; };

type Params = record {
	nonce: Nonce;
	participants: vec L2Account;
	challenge_duration: Duration;
};

type State = record {
	channel: ChannelId;
	version: nat64;
	allocation: vec Amount;
	finalized: bool;
};

type FullySignedState = record {
	state: State;
	sigs: vec blob;
};

service : {
	"deposit": (Funding, Amount) -> (opt Error);
	"query_deposit": (Funding) -> (opt Amount) query;
	"conclude": (Params, FullySignedState) -> (opt Error);
}
